////////////////////////////////////////////////////////////////////////////
//
//  This file is part of RTIMULib
//
//  Copyright (c) 2014-2015, richards-tech, LLC
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of
//  this software and associated documentation files (the "Software"), to deal in
//  the Software without restriction, including without limitation the rights to use,
//  copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
//  Software, and to permit persons to whom the Software is furnished to do so,
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
//  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
//  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
//  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


#include "RTIMULib.h"

int main()
{
    int sampleCount = 0;
    int sampleRate = 0;
    uint64_t rateTimer;
    uint64_t displayTimer;
    uint64_t now;

    //  Using RTIMULib here allows it to use the .ini file generated by RTIMULibDemo.
    //  Or, you can create the .ini in some other directory by using:
    //      RTIMUSettings *settings = new RTIMUSettings("<directory path>", "RTIMULib");
    //  where <directory path> is the path to where the .ini file is to be loaded/saved

    RTIMUSettings *settings1 = new RTIMUSettings("RTIMULib1");
    RTIMUSettings *settings2 = new RTIMUSettings("RTIMULib2");

    RTIMU *imu1 = RTIMU::createIMU(settings1);
    RTIMU *imu2 = RTIMU::createIMU(settings2);

    if ((imu1 == NULL) || (imu1->IMUType() == RTIMU_TYPE_NULL)) {
        printf("No IMU1 found\n");
        exit(1);
    }
    if ((imu2 == NULL) || (imu2->IMUType() == RTIMU_TYPE_NULL)) {
        printf("No IMU2 found\n");
        exit(1);
    }

    //  This is an opportunity to manually override any settings before the call IMUInit

    //  set up IMU

    imu1->IMUInit();
    imu2->IMUInit();

    //  this is a convenient place to change fusion parameters

    imu1->setSlerpPower(0.02);
    imu1->setGyroEnable(true);
    imu1->setAccelEnable(true);
    imu1->setCompassEnable(true);
    
    imu2->setSlerpPower(0.02);
    imu2->setGyroEnable(true);
    imu2->setAccelEnable(true);
    imu2->setCompassEnable(true);

    //  set up for rate timer

    rateTimer = displayTimer = RTMath::currentUSecsSinceEpoch();

    //  now just process data

    while (1) {
        //  poll at the rate recommended by the IMU

        usleep(imu1->IMUGetPollInterval() * 1000);

        while (imu1->IMURead()) {
            RTIMU_DATA imuData1 = imu1->getIMUData();
            RTIMU_DATA imuData2 = imu2->getIMUData();
            sampleCount++;

            now = RTMath::currentUSecsSinceEpoch();

            //  display 10 times per second

           if ((now - displayTimer) > 100000) {
//                printf("Sample rate %d: %s\r", sampleRate, RTMath::displayDegrees("", imuData.fusionPose));
//                fflush(stdout);
//                displayTimer = now;
//            }
            
               RTFusionKalman4 * fusion = new RTFusionKalman4;
               fusion->LSE(imuData1, imuData2, settings1, settings2);
            fflush(stdout);
           }

            //  update rate every second

            if ((now - rateTimer) > 1000000) {
                sampleRate = sampleCount;
                sampleCount = 0;
                rateTimer = now;
            }
        }
    }
}

