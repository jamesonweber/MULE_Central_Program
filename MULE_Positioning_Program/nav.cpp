//Array of IMUs -> 
//Array math ->   
//Get “single” output -> 
//Carouselling -> 
//Carouselling math -> 
//get reduced-error output -> 
//“Conversion to cartesian” math -> 
//Kalman filter with pressure sensor as input 

#include "nav.h"

bool getGPSLock(){
    
}

RTIMU_DATA sampleIMU(RTIMU imu){
    //  poll at the rate recommended by the IMU
    usleep(imu->IMUGetPollInterval() * 1000);
    
    while (imu->IMURead()) {
        RTIMU_DATA imuData = imu->getIMUData();
        return imuData;
    }
}

void setup(){
    int sampleCount = 0;
    int sampleRate = 0;
    uint64_t rateTimer;
    uint64_t displayTimer;
    uint64_t now;
    
    //  Using RTIMULib here allows it to use the .ini file generated by RTIMULibDemo.
    //  Or, you can create the .ini in some other directory by using:
    //      RTIMUSettings *settings = new RTIMUSettings("<directory path>", "RTIMULib");
    //  where <directory path> is the path to where the .ini file is to be loaded/saved
    
    RTIMUSettings *settings1 = new RTIMUSettings("IMU1_Settings");
    RTIMUSettings *settings2 = new RTIMUSettings("IMU2_Settings");
    RTIMUSettings *settings3 = new RTIMUSettings("IMU3_Settings");
    
    imu1 = RTIMU::createIMU(settings1);
    if ((imu1 == NULL) || (imu1->IMUType() == RTIMU_TYPE_NULL)) {
        printf("IMU 1 not found\n");
        exit(1);
    }
    imu2 = RTIMU::createIMU(settings2);
    if ((imu2 == NULL) || (imu2->IMUType() == RTIMU_TYPE_NULL)) {
        printf("IMU 2 not found\n");
        exit(1);
    }
    imu3 = RTIMU::createIMU(settings3);
    if ((imu3 == NULL) || (imu3->IMUType() == RTIMU_TYPE_NULL)) {
        printf("IMU 3 not found\n");
        exit(1);
    }
    
    
    //  This is an opportunity to manually override any settings before the call IMUInit
    
    //  set up IMU
    
    imu1->IMUInit();
    imu2->IMUInit();
    imu3->IMUInit();
    
    //  this is a convenient place to change fusion parameters
    
    imu1->setSlerpPower(0.02);
    imu1->setGyroEnable(true);
    imu1->setAccelEnable(true);
    imu1->setCompassEnable(true);
    
    imu2->setSlerpPower(0.02);
    imu2->setGyroEnable(true);
    imu2->setAccelEnable(true);
    imu2->setCompassEnable(true);
    
    imu3->setSlerpPower(0.02);
    imu3->setGyroEnable(true);
    imu3->setAccelEnable(true);
    imu3->setCompassEnable(true);
    
    //  set up for rate timer
    
    rateTimer = displayTimer = RTMath::currentUSecsSinceEpoch();
}

